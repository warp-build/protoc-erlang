%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.6
%% Version source: file
-module(emqx_gateway_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_emqx.exproto.v1.ResultCode'/1, 'enum_value_by_symbol_emqx.exproto.v1.ResultCode'/1]).
-export(['enum_symbol_by_value_emqx.exproto.v1.TimerType'/1, 'enum_value_by_symbol_emqx.exproto.v1.TimerType'/1]).
-export(['enum_symbol_by_value_emqx.exproto.v1.SocketType'/1, 'enum_value_by_symbol_emqx.exproto.v1.SocketType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types
-type 'emqx.exproto.v1.ResultCode'() :: 'SUCCESS' | 'UNKNOWN' | 'CONN_PROCESS_NOT_ALIVE' | 'REQUIRED_PARAMS_MISSED' | 'PARAMS_TYPE_ERROR' | 'PERMISSION_DENY'.
-type 'emqx.exproto.v1.TimerType'() :: 'KEEPALIVE'.
-type 'emqx.exproto.v1.SocketType'() :: 'TCP' | 'SSL' | 'UDP' | 'DTLS'.
-export_type(['emqx.exproto.v1.ResultCode'/0, 'emqx.exproto.v1.TimerType'/0, 'emqx.exproto.v1.SocketType'/0]).

%% message types
-type empty_success() ::
      #{
       }.

-type code_response() ::
      #{code                    => 'SUCCESS' | 'UNKNOWN' | 'CONN_PROCESS_NOT_ALIVE' | 'REQUIRED_PARAMS_MISSED' | 'PARAMS_TYPE_ERROR' | 'PERMISSION_DENY' | integer(), % = 1, optional, enum emqx.exproto.v1.ResultCode
        message                 => unicode:chardata() % = 2, optional
       }.

-type send_bytes_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        bytes                   => iodata()         % = 2, optional
       }.

-type close_socket_request() ::
      #{conn                    => unicode:chardata() % = 1, optional
       }.

-type authenticate_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        clientinfo              => client_info(),   % = 2, optional
        password                => unicode:chardata() % = 3, optional
       }.

-type timer_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        type                    => 'KEEPALIVE' | integer(), % = 2, optional, enum emqx.exproto.v1.TimerType
        interval                => non_neg_integer() % = 3, optional, 32 bits
       }.

-type publish_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        topic                   => unicode:chardata(), % = 2, optional
        qos                     => non_neg_integer(), % = 3, optional, 32 bits
        payload                 => iodata()         % = 4, optional
       }.

-type subscribe_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        topic                   => unicode:chardata(), % = 2, optional
        qos                     => non_neg_integer() % = 3, optional, 32 bits
       }.

-type unsubscribe_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        topic                   => unicode:chardata() % = 2, optional
       }.

-type socket_created_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        conninfo                => conn_info()      % = 2, optional
       }.

-type received_bytes_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        bytes                   => iodata()         % = 2, optional
       }.

-type timer_timeout_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        type                    => 'KEEPALIVE' | integer() % = 2, optional, enum emqx.exproto.v1.TimerType
       }.

-type socket_closed_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        reason                  => unicode:chardata() % = 2, optional
       }.

-type received_messages_request() ::
      #{conn                    => unicode:chardata(), % = 1, optional
        messages                => [message()]      % = 2, repeated
       }.

-type conn_info() ::
      #{socktype                => 'TCP' | 'SSL' | 'UDP' | 'DTLS' | integer(), % = 1, optional, enum emqx.exproto.v1.SocketType
        peername                => address(),       % = 2, optional
        sockname                => address(),       % = 3, optional
        peercert                => certificate_info() % = 4, optional
       }.

-type address() ::
      #{host                    => unicode:chardata(), % = 1, optional
        port                    => non_neg_integer() % = 2, optional, 32 bits
       }.

-type certificate_info() ::
      #{cn                      => unicode:chardata(), % = 1, optional
        dn                      => unicode:chardata() % = 2, optional
       }.

-type client_info() ::
      #{proto_name              => unicode:chardata(), % = 1, optional
        proto_ver               => unicode:chardata(), % = 2, optional
        clientid                => unicode:chardata(), % = 3, optional
        username                => unicode:chardata(), % = 4, optional
        mountpoint              => unicode:chardata() % = 5, optional
       }.

-type message() ::
      #{node                    => unicode:chardata(), % = 1, optional
        id                      => unicode:chardata(), % = 2, optional
        qos                     => non_neg_integer(), % = 3, optional, 32 bits
        from                    => unicode:chardata(), % = 4, optional
        topic                   => unicode:chardata(), % = 5, optional
        payload                 => iodata(),        % = 6, optional
        timestamp               => non_neg_integer() % = 7, optional, 64 bits
       }.

-export_type(['empty_success'/0, 'code_response'/0, 'send_bytes_request'/0, 'close_socket_request'/0, 'authenticate_request'/0, 'timer_request'/0, 'publish_request'/0, 'subscribe_request'/0, 'unsubscribe_request'/0, 'socket_created_request'/0, 'received_bytes_request'/0, 'timer_timeout_request'/0, 'socket_closed_request'/0, 'received_messages_request'/0, 'conn_info'/0, 'address'/0, 'certificate_info'/0, 'client_info'/0, 'message'/0]).
-type '$msg_name'() :: empty_success | code_response | send_bytes_request | close_socket_request | authenticate_request | timer_request | publish_request | subscribe_request | unsubscribe_request | socket_created_request | received_bytes_request | timer_timeout_request | socket_closed_request | received_messages_request | conn_info | address | certificate_info | client_info | message.
-type '$msg'() :: empty_success() | code_response() | send_bytes_request() | close_socket_request() | authenticate_request() | timer_request() | publish_request() | subscribe_request() | unsubscribe_request() | socket_created_request() | received_bytes_request() | timer_timeout_request() | socket_closed_request() | received_messages_request() | conn_info() | address() | certificate_info() | client_info() | message().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        empty_success -> encode_msg_empty_success(id(Msg, TrUserData), TrUserData);
        code_response -> encode_msg_code_response(id(Msg, TrUserData), TrUserData);
        send_bytes_request -> encode_msg_send_bytes_request(id(Msg, TrUserData), TrUserData);
        close_socket_request -> encode_msg_close_socket_request(id(Msg, TrUserData), TrUserData);
        authenticate_request -> encode_msg_authenticate_request(id(Msg, TrUserData), TrUserData);
        timer_request -> encode_msg_timer_request(id(Msg, TrUserData), TrUserData);
        publish_request -> encode_msg_publish_request(id(Msg, TrUserData), TrUserData);
        subscribe_request -> encode_msg_subscribe_request(id(Msg, TrUserData), TrUserData);
        unsubscribe_request -> encode_msg_unsubscribe_request(id(Msg, TrUserData), TrUserData);
        socket_created_request -> encode_msg_socket_created_request(id(Msg, TrUserData), TrUserData);
        received_bytes_request -> encode_msg_received_bytes_request(id(Msg, TrUserData), TrUserData);
        timer_timeout_request -> encode_msg_timer_timeout_request(id(Msg, TrUserData), TrUserData);
        socket_closed_request -> encode_msg_socket_closed_request(id(Msg, TrUserData), TrUserData);
        received_messages_request -> encode_msg_received_messages_request(id(Msg, TrUserData), TrUserData);
        conn_info -> encode_msg_conn_info(id(Msg, TrUserData), TrUserData);
        address -> encode_msg_address(id(Msg, TrUserData), TrUserData);
        certificate_info -> encode_msg_certificate_info(id(Msg, TrUserData), TrUserData);
        client_info -> encode_msg_client_info(id(Msg, TrUserData), TrUserData);
        message -> encode_msg_message(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_empty_success(_Msg, _TrUserData) -> <<>>.

encode_msg_code_response(Msg, TrUserData) -> encode_msg_code_response(Msg, <<>>, TrUserData).


encode_msg_code_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{code := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 'SUCCESS'; TrF1 =:= 0 -> Bin;
                        true -> 'e_enum_emqx.exproto.v1.ResultCode'(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{message := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_send_bytes_request(Msg, TrUserData) -> encode_msg_send_bytes_request(Msg, <<>>, TrUserData).


encode_msg_send_bytes_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{bytes := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_close_socket_request(Msg, TrUserData) -> encode_msg_close_socket_request(Msg, <<>>, TrUserData).


encode_msg_close_socket_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{conn := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_authenticate_request(Msg, TrUserData) -> encode_msg_authenticate_request(Msg, <<>>, TrUserData).


encode_msg_authenticate_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{clientinfo := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= undefined -> B1;
                        true -> e_mfield_authenticate_request_clientinfo(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{password := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case is_empty_string(TrF3) of
                    true -> B2;
                    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_timer_request(Msg, TrUserData) -> encode_msg_timer_request(Msg, <<>>, TrUserData).


encode_msg_timer_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{type := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 'KEEPALIVE'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_emqx.exproto.v1.TimerType'(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{interval := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_publish_request(Msg, TrUserData) -> encode_msg_publish_request(Msg, <<>>, TrUserData).


encode_msg_publish_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{topic := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{qos := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{payload := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case iolist_size(TrF4) of
                    0 -> B3;
                    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_subscribe_request(Msg, TrUserData) -> encode_msg_subscribe_request(Msg, <<>>, TrUserData).


encode_msg_subscribe_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{topic := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{qos := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_unsubscribe_request(Msg, TrUserData) -> encode_msg_unsubscribe_request(Msg, <<>>, TrUserData).


encode_msg_unsubscribe_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{topic := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_socket_created_request(Msg, TrUserData) -> encode_msg_socket_created_request(Msg, <<>>, TrUserData).


encode_msg_socket_created_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{conninfo := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= undefined -> B1;
                   true -> e_mfield_socket_created_request_conninfo(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_received_bytes_request(Msg, TrUserData) -> encode_msg_received_bytes_request(Msg, <<>>, TrUserData).


encode_msg_received_bytes_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{bytes := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case iolist_size(TrF2) of
                    0 -> B1;
                    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_timer_timeout_request(Msg, TrUserData) -> encode_msg_timer_timeout_request(Msg, <<>>, TrUserData).


encode_msg_timer_timeout_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{type := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 'KEEPALIVE'; TrF2 =:= 0 -> B1;
                   true -> 'e_enum_emqx.exproto.v1.TimerType'(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_socket_closed_request(Msg, TrUserData) -> encode_msg_socket_closed_request(Msg, <<>>, TrUserData).


encode_msg_socket_closed_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{reason := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_received_messages_request(Msg, TrUserData) -> encode_msg_received_messages_request(Msg, <<>>, TrUserData).


encode_msg_received_messages_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{conn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{messages := F2} ->
            TrF2 = id(F2, TrUserData),
            if TrF2 == [] -> B1;
               true -> e_field_received_messages_request_messages(TrF2, B1, TrUserData)
            end;
        _ -> B1
    end.

encode_msg_conn_info(Msg, TrUserData) -> encode_msg_conn_info(Msg, <<>>, TrUserData).


encode_msg_conn_info(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{socktype := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 'TCP'; TrF1 =:= 0 -> Bin;
                        true -> 'e_enum_emqx.exproto.v1.SocketType'(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{peername := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= undefined -> B1;
                        true -> e_mfield_conn_info_peername(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{sockname := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= undefined -> B2;
                        true -> e_mfield_conn_info_sockname(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{peercert := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= undefined -> B3;
                   true -> e_mfield_conn_info_peercert(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_address(Msg, TrUserData) -> encode_msg_address(Msg, <<>>, TrUserData).


encode_msg_address(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{host := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{port := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_certificate_info(Msg, TrUserData) -> encode_msg_certificate_info(Msg, <<>>, TrUserData).


encode_msg_certificate_info(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{cn := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{dn := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_client_info(Msg, TrUserData) -> encode_msg_client_info(Msg, <<>>, TrUserData).


encode_msg_client_info(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{proto_name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{proto_ver := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{clientid := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{username := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{mountpoint := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                case is_empty_string(TrF5) of
                    true -> B4;
                    false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_message(Msg, TrUserData) -> encode_msg_message(Msg, <<>>, TrUserData).


encode_msg_message(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{node := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{qos := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{from := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{topic := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     case is_empty_string(TrF5) of
                         true -> B4;
                         false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{payload := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     case iolist_size(TrF6) of
                         0 -> B5;
                         _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    case M of
        #{timestamp := F7} ->
            begin
                TrF7 = id(F7, TrUserData),
                if TrF7 =:= 0 -> B6;
                   true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
                end
            end;
        _ -> B6
    end.

e_mfield_authenticate_request_clientinfo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_created_request_conninfo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_conn_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_received_messages_request_messages(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_received_messages_request_messages([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_received_messages_request_messages(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_received_messages_request_messages(Rest, Bin3, TrUserData);
e_field_received_messages_request_messages([], Bin, _TrUserData) -> Bin.

e_mfield_conn_info_peername(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_address(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_conn_info_sockname(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_address(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_conn_info_peercert(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_certificate_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_emqx.exproto.v1.ResultCode'('SUCCESS', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_emqx.exproto.v1.ResultCode'('UNKNOWN', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_emqx.exproto.v1.ResultCode'('CONN_PROCESS_NOT_ALIVE', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_emqx.exproto.v1.ResultCode'('REQUIRED_PARAMS_MISSED', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_emqx.exproto.v1.ResultCode'('PARAMS_TYPE_ERROR', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_emqx.exproto.v1.ResultCode'('PERMISSION_DENY', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_emqx.exproto.v1.ResultCode'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_emqx.exproto.v1.TimerType'('KEEPALIVE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_emqx.exproto.v1.TimerType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_emqx.exproto.v1.SocketType'('TCP', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_emqx.exproto.v1.SocketType'('SSL', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_emqx.exproto.v1.SocketType'('UDP', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_emqx.exproto.v1.SocketType'('DTLS', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_emqx.exproto.v1.SocketType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(empty_success, Bin, TrUserData) -> id(decode_msg_empty_success(Bin, TrUserData), TrUserData);
decode_msg_2_doit(code_response, Bin, TrUserData) -> id(decode_msg_code_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(send_bytes_request, Bin, TrUserData) -> id(decode_msg_send_bytes_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(close_socket_request, Bin, TrUserData) -> id(decode_msg_close_socket_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(authenticate_request, Bin, TrUserData) -> id(decode_msg_authenticate_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(timer_request, Bin, TrUserData) -> id(decode_msg_timer_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(publish_request, Bin, TrUserData) -> id(decode_msg_publish_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(subscribe_request, Bin, TrUserData) -> id(decode_msg_subscribe_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(unsubscribe_request, Bin, TrUserData) -> id(decode_msg_unsubscribe_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(socket_created_request, Bin, TrUserData) -> id(decode_msg_socket_created_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(received_bytes_request, Bin, TrUserData) -> id(decode_msg_received_bytes_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(timer_timeout_request, Bin, TrUserData) -> id(decode_msg_timer_timeout_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(socket_closed_request, Bin, TrUserData) -> id(decode_msg_socket_closed_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(received_messages_request, Bin, TrUserData) -> id(decode_msg_received_messages_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(conn_info, Bin, TrUserData) -> id(decode_msg_conn_info(Bin, TrUserData), TrUserData);
decode_msg_2_doit(address, Bin, TrUserData) -> id(decode_msg_address(Bin, TrUserData), TrUserData);
decode_msg_2_doit(certificate_info, Bin, TrUserData) -> id(decode_msg_certificate_info(Bin, TrUserData), TrUserData);
decode_msg_2_doit(client_info, Bin, TrUserData) -> id(decode_msg_client_info(Bin, TrUserData), TrUserData);
decode_msg_2_doit(message, Bin, TrUserData) -> id(decode_msg_message(Bin, TrUserData), TrUserData).



decode_msg_empty_success(Bin, TrUserData) -> dfp_read_field_def_empty_success(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_empty_success(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_empty_success(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_empty_success(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_empty_success(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_empty_success(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_empty_success(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_empty_success(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_empty_success(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_empty_success(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_empty_success(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_empty_success(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_empty_success(<<>>, 0, 0, _, _) -> #{}.

skip_varint_empty_success(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_empty_success(Rest, Z1, Z2, F, TrUserData);
skip_varint_empty_success(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_empty_success(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_empty_success(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_empty_success(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_empty_success(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_empty_success(Rest2, 0, 0, F, TrUserData).

skip_group_empty_success(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_empty_success(Rest, 0, Z2, FNum, TrUserData).

skip_32_empty_success(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_empty_success(Rest, Z1, Z2, F, TrUserData).

skip_64_empty_success(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_empty_success(Rest, Z1, Z2, F, TrUserData).

decode_msg_code_response(Bin, TrUserData) -> dfp_read_field_def_code_response(Bin, 0, 0, 0, id('SUCCESS', TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_code_response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_code_response_code(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_code_response(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_code_response_message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_code_response(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{code => F@_1, message => F@_2};
dfp_read_field_def_code_response(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_code_response(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_code_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_code_response(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_code_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_code_response_code(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_code_response_message(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_code_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_code_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_code_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_code_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_code_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_code_response(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{code => F@_1, message => F@_2}.

d_field_code_response_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_code_response_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_code_response_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_emqx.exproto.v1.ResultCode'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_code_response(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_code_response_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_code_response_message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_code_response_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_code_response(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_code_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_code_response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_code_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_code_response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_code_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_code_response(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_code_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_code_response(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_code_response(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_code_response(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_code_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_code_response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_code_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_code_response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_send_bytes_request(Bin, TrUserData) -> dfp_read_field_def_send_bytes_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_send_bytes_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_send_bytes_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_send_bytes_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_send_bytes_request_bytes(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_send_bytes_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, bytes => F@_2};
dfp_read_field_def_send_bytes_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_send_bytes_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_send_bytes_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_send_bytes_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_send_bytes_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_send_bytes_request_conn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_send_bytes_request_bytes(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_send_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_send_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_send_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_send_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_send_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_send_bytes_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, bytes => F@_2}.

d_field_send_bytes_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_send_bytes_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_send_bytes_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_send_bytes_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_send_bytes_request_bytes(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_send_bytes_request_bytes(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_send_bytes_request_bytes(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_send_bytes_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_send_bytes_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_send_bytes_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_send_bytes_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_send_bytes_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_send_bytes_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_send_bytes_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_send_bytes_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_send_bytes_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_send_bytes_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_send_bytes_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_send_bytes_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_send_bytes_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_send_bytes_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_send_bytes_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_close_socket_request(Bin, TrUserData) -> dfp_read_field_def_close_socket_request(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_close_socket_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_close_socket_request_conn(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_close_socket_request(<<>>, 0, 0, _, F@_1, _) -> #{conn => F@_1};
dfp_read_field_def_close_socket_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_close_socket_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_close_socket_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_close_socket_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_close_socket_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_close_socket_request_conn(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_close_socket_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_close_socket_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_close_socket_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_close_socket_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_close_socket_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_close_socket_request(<<>>, 0, 0, _, F@_1, _) -> #{conn => F@_1}.

d_field_close_socket_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_close_socket_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_close_socket_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_close_socket_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_close_socket_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_close_socket_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_close_socket_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_close_socket_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_close_socket_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_close_socket_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_close_socket_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_close_socket_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_close_socket_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_close_socket_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_close_socket_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_close_socket_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_close_socket_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_close_socket_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_authenticate_request(Bin, TrUserData) -> dfp_read_field_def_authenticate_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id('$undef', TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_authenticate_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_authenticate_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_authenticate_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_authenticate_request_clientinfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_authenticate_request(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_authenticate_request_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_authenticate_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    S1 = #{conn => F@_1, password => F@_3},
    if F@_2 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_2}
    end;
dfp_read_field_def_authenticate_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_authenticate_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_authenticate_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_authenticate_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_authenticate_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_authenticate_request_conn(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_authenticate_request_clientinfo(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_authenticate_request_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_authenticate_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_authenticate_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_authenticate_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_authenticate_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_authenticate_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_authenticate_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) ->
    S1 = #{conn => F@_1, password => F@_3},
    if F@_2 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_2}
    end.

d_field_authenticate_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_authenticate_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_authenticate_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_authenticate_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_authenticate_request_clientinfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_authenticate_request_clientinfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_authenticate_request_clientinfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_client_info(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_authenticate_request(RestF,
                                            0,
                                            0,
                                            F,
                                            F@_1,
                                            if Prev == '$undef' -> NewFValue;
                                               true -> merge_msg_client_info(Prev, NewFValue, TrUserData)
                                            end,
                                            F@_3,
                                            TrUserData).

d_field_authenticate_request_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_authenticate_request_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_authenticate_request_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_authenticate_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_authenticate_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_authenticate_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_authenticate_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_authenticate_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_authenticate_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_authenticate_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_authenticate_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_authenticate_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_authenticate_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_authenticate_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_authenticate_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_authenticate_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_authenticate_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_authenticate_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_timer_request(Bin, TrUserData) -> dfp_read_field_def_timer_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id('KEEPALIVE', TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_timer_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_timer_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_timer_request(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_timer_request_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_timer_request(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_timer_request_interval(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_timer_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{conn => F@_1, type => F@_2, interval => F@_3};
dfp_read_field_def_timer_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_timer_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_timer_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_timer_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_timer_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_timer_request_conn(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_timer_request_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_timer_request_interval(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_timer_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_timer_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_timer_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_timer_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_timer_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_timer_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{conn => F@_1, type => F@_2, interval => F@_3}.

d_field_timer_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_timer_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_timer_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_timer_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_timer_request_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_timer_request_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_timer_request_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_emqx.exproto.v1.TimerType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_timer_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_timer_request_interval(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_timer_request_interval(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_timer_request_interval(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_timer_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_timer_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_timer_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_timer_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_timer_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_timer_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_timer_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_timer_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timer_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_timer_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timer_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_timer_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_timer_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_timer_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_timer_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_publish_request(Bin, TrUserData) -> dfp_read_field_def_publish_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_publish_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_publish_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_publish_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_publish_request_topic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_publish_request(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_publish_request_qos(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_publish_request(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_publish_request_payload(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_publish_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{conn => F@_1, topic => F@_2, qos => F@_3, payload => F@_4};
dfp_read_field_def_publish_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_publish_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_publish_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_publish_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_publish_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_publish_request_conn(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_publish_request_topic(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_publish_request_qos(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_publish_request_payload(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_publish_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_publish_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_publish_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_publish_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_publish_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_publish_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{conn => F@_1, topic => F@_2, qos => F@_3, payload => F@_4}.

d_field_publish_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_publish_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_publish_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_publish_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_publish_request_topic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_publish_request_topic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_publish_request_topic(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_publish_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_publish_request_qos(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_publish_request_qos(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_publish_request_qos(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_publish_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_publish_request_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_publish_request_payload(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_publish_request_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_publish_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_publish_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_publish_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_publish_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_publish_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_publish_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_publish_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_publish_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_publish_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_publish_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_publish_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_publish_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_publish_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_publish_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_publish_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_subscribe_request(Bin, TrUserData) -> dfp_read_field_def_subscribe_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_subscribe_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_subscribe_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_subscribe_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_subscribe_request_topic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_subscribe_request(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_subscribe_request_qos(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_subscribe_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{conn => F@_1, topic => F@_2, qos => F@_3};
dfp_read_field_def_subscribe_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_subscribe_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_subscribe_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_subscribe_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_subscribe_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_subscribe_request_conn(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_subscribe_request_topic(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_subscribe_request_qos(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_subscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_subscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_subscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_subscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_subscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_subscribe_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{conn => F@_1, topic => F@_2, qos => F@_3}.

d_field_subscribe_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_subscribe_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_subscribe_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_subscribe_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_subscribe_request_topic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_subscribe_request_topic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_subscribe_request_topic(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_subscribe_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_subscribe_request_qos(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_subscribe_request_qos(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_subscribe_request_qos(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_subscribe_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_subscribe_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_subscribe_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_subscribe_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_subscribe_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_subscribe_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_subscribe_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_subscribe_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_subscribe_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_subscribe_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_subscribe_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_subscribe_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_subscribe_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_subscribe_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_subscribe_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_unsubscribe_request(Bin, TrUserData) -> dfp_read_field_def_unsubscribe_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_unsubscribe_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_unsubscribe_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_unsubscribe_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_unsubscribe_request_topic(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_unsubscribe_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, topic => F@_2};
dfp_read_field_def_unsubscribe_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_unsubscribe_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_unsubscribe_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_unsubscribe_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_unsubscribe_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_unsubscribe_request_conn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_unsubscribe_request_topic(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_unsubscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_unsubscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_unsubscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_unsubscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_unsubscribe_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_unsubscribe_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, topic => F@_2}.

d_field_unsubscribe_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_unsubscribe_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_unsubscribe_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_unsubscribe_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_unsubscribe_request_topic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_unsubscribe_request_topic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_unsubscribe_request_topic(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_unsubscribe_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_unsubscribe_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_unsubscribe_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_unsubscribe_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_unsubscribe_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_unsubscribe_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_unsubscribe_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_unsubscribe_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_unsubscribe_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_unsubscribe_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_unsubscribe_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_unsubscribe_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_unsubscribe_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_unsubscribe_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_unsubscribe_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_socket_created_request(Bin, TrUserData) -> dfp_read_field_def_socket_created_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_socket_created_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_socket_created_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_socket_created_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_socket_created_request_conninfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_socket_created_request(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{conn => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{conninfo => F@_2}
    end;
dfp_read_field_def_socket_created_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_socket_created_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_socket_created_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_socket_created_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_socket_created_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_socket_created_request_conn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_socket_created_request_conninfo(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_socket_created_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_socket_created_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_socket_created_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_socket_created_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_socket_created_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_socket_created_request(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{conn => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{conninfo => F@_2}
    end.

d_field_socket_created_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_socket_created_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_socket_created_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_socket_created_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_socket_created_request_conninfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_socket_created_request_conninfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_socket_created_request_conninfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_conn_info(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_socket_created_request(RestF,
                                              0,
                                              0,
                                              F,
                                              F@_1,
                                              if Prev == '$undef' -> NewFValue;
                                                 true -> merge_msg_conn_info(Prev, NewFValue, TrUserData)
                                              end,
                                              TrUserData).

skip_varint_socket_created_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_socket_created_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_socket_created_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_socket_created_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_socket_created_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_socket_created_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_socket_created_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket_created_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_socket_created_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket_created_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_socket_created_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_socket_created_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_socket_created_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_socket_created_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_received_bytes_request(Bin, TrUserData) -> dfp_read_field_def_received_bytes_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_received_bytes_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_received_bytes_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_received_bytes_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_received_bytes_request_bytes(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_received_bytes_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, bytes => F@_2};
dfp_read_field_def_received_bytes_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_received_bytes_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_received_bytes_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_received_bytes_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_received_bytes_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_received_bytes_request_conn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_received_bytes_request_bytes(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_received_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_received_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_received_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_received_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_received_bytes_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_received_bytes_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, bytes => F@_2}.

d_field_received_bytes_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_received_bytes_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_received_bytes_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_received_bytes_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_received_bytes_request_bytes(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_received_bytes_request_bytes(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_received_bytes_request_bytes(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_received_bytes_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_received_bytes_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_received_bytes_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_received_bytes_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_received_bytes_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_received_bytes_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_received_bytes_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_received_bytes_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_received_bytes_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_received_bytes_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_received_bytes_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_received_bytes_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_received_bytes_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_received_bytes_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_received_bytes_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_timer_timeout_request(Bin, TrUserData) -> dfp_read_field_def_timer_timeout_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id('KEEPALIVE', TrUserData), TrUserData).

dfp_read_field_def_timer_timeout_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_timer_timeout_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_timer_timeout_request(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_timer_timeout_request_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_timer_timeout_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, type => F@_2};
dfp_read_field_def_timer_timeout_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_timer_timeout_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_timer_timeout_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_timer_timeout_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_timer_timeout_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_timer_timeout_request_conn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_timer_timeout_request_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_timer_timeout_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_timer_timeout_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_timer_timeout_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_timer_timeout_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_timer_timeout_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_timer_timeout_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, type => F@_2}.

d_field_timer_timeout_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_timer_timeout_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_timer_timeout_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_timer_timeout_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_timer_timeout_request_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_timer_timeout_request_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_timer_timeout_request_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_emqx.exproto.v1.TimerType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_timer_timeout_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_timer_timeout_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_timer_timeout_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_timer_timeout_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_timer_timeout_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_timer_timeout_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_timer_timeout_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_timer_timeout_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timer_timeout_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_timer_timeout_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timer_timeout_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_timer_timeout_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_timer_timeout_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_timer_timeout_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_timer_timeout_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_socket_closed_request(Bin, TrUserData) -> dfp_read_field_def_socket_closed_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_socket_closed_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_socket_closed_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_socket_closed_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_socket_closed_request_reason(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_socket_closed_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, reason => F@_2};
dfp_read_field_def_socket_closed_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_socket_closed_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_socket_closed_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_socket_closed_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_socket_closed_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_socket_closed_request_conn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_socket_closed_request_reason(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_socket_closed_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_socket_closed_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_socket_closed_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_socket_closed_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_socket_closed_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_socket_closed_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{conn => F@_1, reason => F@_2}.

d_field_socket_closed_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_socket_closed_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_socket_closed_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_socket_closed_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_socket_closed_request_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_socket_closed_request_reason(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_socket_closed_request_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_socket_closed_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_socket_closed_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_socket_closed_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_socket_closed_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_socket_closed_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_socket_closed_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_socket_closed_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_socket_closed_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket_closed_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_socket_closed_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket_closed_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_socket_closed_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_socket_closed_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_socket_closed_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_socket_closed_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_received_messages_request(Bin, TrUserData) -> dfp_read_field_def_received_messages_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_received_messages_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_received_messages_request_conn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_received_messages_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_received_messages_request_messages(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_received_messages_request(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    S1 = #{conn => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{messages => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_received_messages_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_received_messages_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_received_messages_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_received_messages_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_received_messages_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_received_messages_request_conn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_received_messages_request_messages(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_received_messages_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_received_messages_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_received_messages_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_received_messages_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_received_messages_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_received_messages_request(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    S1 = #{conn => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{messages => lists_reverse(R1, TrUserData)}
    end.

d_field_received_messages_request_conn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_received_messages_request_conn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_received_messages_request_conn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_received_messages_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_received_messages_request_messages(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_received_messages_request_messages(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_received_messages_request_messages(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_message(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_received_messages_request(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_received_messages_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_received_messages_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_received_messages_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_received_messages_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_received_messages_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_received_messages_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_received_messages_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_received_messages_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_received_messages_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_received_messages_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_received_messages_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_received_messages_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_received_messages_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_received_messages_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_conn_info(Bin, TrUserData) -> dfp_read_field_def_conn_info(Bin, 0, 0, 0, id('TCP', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_conn_info(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_conn_info_socktype(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_conn_info(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_conn_info_peername(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_conn_info(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_conn_info_sockname(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_conn_info(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_conn_info_peercert(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_conn_info(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{socktype => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{peername => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{sockname => F@_3}
         end,
    if F@_4 == '$undef' -> S3;
       true -> S3#{peercert => F@_4}
    end;
dfp_read_field_def_conn_info(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_conn_info(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_conn_info(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_conn_info(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_conn_info(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_conn_info_socktype(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_conn_info_peername(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_conn_info_sockname(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_conn_info_peercert(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_conn_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_conn_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_conn_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_conn_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_conn_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_conn_info(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{socktype => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{peername => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{sockname => F@_3}
         end,
    if F@_4 == '$undef' -> S3;
       true -> S3#{peercert => F@_4}
    end.

d_field_conn_info_socktype(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_conn_info_socktype(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_conn_info_socktype(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_emqx.exproto.v1.SocketType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_conn_info(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_conn_info_peername(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_conn_info_peername(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_conn_info_peername(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_address(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 if Prev == '$undef' -> NewFValue;
                                    true -> merge_msg_address(Prev, NewFValue, TrUserData)
                                 end,
                                 F@_3,
                                 F@_4,
                                 TrUserData).

d_field_conn_info_sockname(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_conn_info_sockname(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_conn_info_sockname(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_address(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 F@_2,
                                 if Prev == '$undef' -> NewFValue;
                                    true -> merge_msg_address(Prev, NewFValue, TrUserData)
                                 end,
                                 F@_4,
                                 TrUserData).

d_field_conn_info_peercert(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_conn_info_peercert(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_conn_info_peercert(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_certificate_info(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 if Prev == '$undef' -> NewFValue;
                                    true -> merge_msg_certificate_info(Prev, NewFValue, TrUserData)
                                 end,
                                 TrUserData).

skip_varint_conn_info(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_conn_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_conn_info(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_conn_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_conn_info(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_conn_info(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_conn_info(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_conn_info(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_conn_info(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_conn_info(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_conn_info(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_conn_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_conn_info(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_conn_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_address(Bin, TrUserData) -> dfp_read_field_def_address(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_address(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_address_host(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_address(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_address_port(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_address(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{host => F@_1, port => F@_2};
dfp_read_field_def_address(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_address(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_address(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_address(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_address(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_address_host(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_address_port(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_address(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_address(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_address(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_address(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_address(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_address(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{host => F@_1, port => F@_2}.

d_field_address_host(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_address_host(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_address_host(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_address(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_address_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_address_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_address_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_address(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_address(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_address(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_address(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_address(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_address(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_address(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_address(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_address(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_address(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_address(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_address(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_address(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_address(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_address(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_certificate_info(Bin, TrUserData) -> dfp_read_field_def_certificate_info(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_certificate_info(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_certificate_info_cn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_certificate_info(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_certificate_info_dn(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_certificate_info(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{cn => F@_1, dn => F@_2};
dfp_read_field_def_certificate_info(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_certificate_info(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_certificate_info(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_certificate_info(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_certificate_info(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_certificate_info_cn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_certificate_info_dn(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_certificate_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_certificate_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_certificate_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_certificate_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_certificate_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_certificate_info(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{cn => F@_1, dn => F@_2}.

d_field_certificate_info_cn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_certificate_info_cn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_certificate_info_cn(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_certificate_info(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_certificate_info_dn(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_certificate_info_dn(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_certificate_info_dn(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_certificate_info(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_certificate_info(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_certificate_info(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_certificate_info(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_certificate_info(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_certificate_info(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_certificate_info(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_certificate_info(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_certificate_info(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_certificate_info(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_certificate_info(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_certificate_info(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_certificate_info(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_certificate_info(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_certificate_info(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_client_info(Bin, TrUserData) -> dfp_read_field_def_client_info(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_client_info(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_client_info_proto_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_client_info(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_client_info_proto_ver(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_client_info(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_client_info_clientid(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_client_info(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_client_info_username(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_client_info(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_client_info_mountpoint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_client_info(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{proto_name => F@_1, proto_ver => F@_2, clientid => F@_3, username => F@_4, mountpoint => F@_5};
dfp_read_field_def_client_info(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_client_info(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_client_info(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_client_info(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_client_info(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_client_info_proto_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_client_info_proto_ver(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_client_info_clientid(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_client_info_username(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_client_info_mountpoint(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_client_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_client_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_client_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_client_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_client_info(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_client_info(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{proto_name => F@_1, proto_ver => F@_2, clientid => F@_3, username => F@_4, mountpoint => F@_5}.

d_field_client_info_proto_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_client_info_proto_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_client_info_proto_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_client_info(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_client_info_proto_ver(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_client_info_proto_ver(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_client_info_proto_ver(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_client_info(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_client_info_clientid(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_client_info_clientid(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_client_info_clientid(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_client_info(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_client_info_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_client_info_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_client_info_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_client_info(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_client_info_mountpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_client_info_mountpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_client_info_mountpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_client_info(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_client_info(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_client_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_client_info(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_client_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_client_info(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_client_info(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_client_info(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_info(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_client_info(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_info(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_client_info(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_client_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_client_info(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_client_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_message(Bin, TrUserData) -> dfp_read_field_def_message(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_message(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_message_node(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_message(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_message_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_message(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_message_qos(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_message(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_message_from(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_message(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_message_topic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_message(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_message_payload(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_message(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_message_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_message(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #{node => F@_1, id => F@_2, qos => F@_3, from => F@_4, topic => F@_5, payload => F@_6, timestamp => F@_7};
dfp_read_field_def_message(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_message(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 -> dg_read_field_def_message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_message(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_message_node(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        18 -> d_field_message_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> d_field_message_qos(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> d_field_message_from(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> d_field_message_topic(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        50 -> d_field_message_payload(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_message_timestamp(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_message(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #{node => F@_1, id => F@_2, qos => F@_3, from => F@_4, topic => F@_5, payload => F@_6, timestamp => F@_7}.

d_field_message_node(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_message_node(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_message_node(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_message(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_message_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_message_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_message_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_message(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_message_qos(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_message_qos(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_message_qos(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_message(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_message_from(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_message_from(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_message_from(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_message(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_message_topic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_message_topic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_message_topic(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_message(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_message_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_message_payload(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_message_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_message(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_message_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_message_timestamp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_message_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_message(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_message(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_message(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    skip_length_delimited_message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_message(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_message(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_message(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_message(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_message(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_enum_emqx.exproto.v1.ResultCode'(0) -> 'SUCCESS';
'd_enum_emqx.exproto.v1.ResultCode'(1) -> 'UNKNOWN';
'd_enum_emqx.exproto.v1.ResultCode'(2) -> 'CONN_PROCESS_NOT_ALIVE';
'd_enum_emqx.exproto.v1.ResultCode'(3) -> 'REQUIRED_PARAMS_MISSED';
'd_enum_emqx.exproto.v1.ResultCode'(4) -> 'PARAMS_TYPE_ERROR';
'd_enum_emqx.exproto.v1.ResultCode'(5) -> 'PERMISSION_DENY';
'd_enum_emqx.exproto.v1.ResultCode'(V) -> V.

'd_enum_emqx.exproto.v1.TimerType'(0) -> 'KEEPALIVE';
'd_enum_emqx.exproto.v1.TimerType'(V) -> V.

'd_enum_emqx.exproto.v1.SocketType'(0) -> 'TCP';
'd_enum_emqx.exproto.v1.SocketType'(1) -> 'SSL';
'd_enum_emqx.exproto.v1.SocketType'(2) -> 'UDP';
'd_enum_emqx.exproto.v1.SocketType'(3) -> 'DTLS';
'd_enum_emqx.exproto.v1.SocketType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        empty_success -> merge_msg_empty_success(Prev, New, TrUserData);
        code_response -> merge_msg_code_response(Prev, New, TrUserData);
        send_bytes_request -> merge_msg_send_bytes_request(Prev, New, TrUserData);
        close_socket_request -> merge_msg_close_socket_request(Prev, New, TrUserData);
        authenticate_request -> merge_msg_authenticate_request(Prev, New, TrUserData);
        timer_request -> merge_msg_timer_request(Prev, New, TrUserData);
        publish_request -> merge_msg_publish_request(Prev, New, TrUserData);
        subscribe_request -> merge_msg_subscribe_request(Prev, New, TrUserData);
        unsubscribe_request -> merge_msg_unsubscribe_request(Prev, New, TrUserData);
        socket_created_request -> merge_msg_socket_created_request(Prev, New, TrUserData);
        received_bytes_request -> merge_msg_received_bytes_request(Prev, New, TrUserData);
        timer_timeout_request -> merge_msg_timer_timeout_request(Prev, New, TrUserData);
        socket_closed_request -> merge_msg_socket_closed_request(Prev, New, TrUserData);
        received_messages_request -> merge_msg_received_messages_request(Prev, New, TrUserData);
        conn_info -> merge_msg_conn_info(Prev, New, TrUserData);
        address -> merge_msg_address(Prev, New, TrUserData);
        certificate_info -> merge_msg_certificate_info(Prev, New, TrUserData);
        client_info -> merge_msg_client_info(Prev, New, TrUserData);
        message -> merge_msg_message(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_empty_success/3}).
merge_msg_empty_success(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_code_response/3}).
merge_msg_code_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{code := NFcode}} -> S1#{code => NFcode};
             {#{code := PFcode}, _} -> S1#{code => PFcode};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{message := NFmessage}} -> S2#{message => NFmessage};
        {#{message := PFmessage}, _} -> S2#{message => PFmessage};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_send_bytes_request/3}).
merge_msg_send_bytes_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{bytes := NFbytes}} -> S2#{bytes => NFbytes};
        {#{bytes := PFbytes}, _} -> S2#{bytes => PFbytes};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_close_socket_request/3}).
merge_msg_close_socket_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{conn := NFconn}} -> S1#{conn => NFconn};
        {#{conn := PFconn}, _} -> S1#{conn => PFconn};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_authenticate_request/3}).
merge_msg_authenticate_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo}, #{clientinfo := NFclientinfo}} -> S2#{clientinfo => merge_msg_client_info(PFclientinfo, NFclientinfo, TrUserData)};
             {_, #{clientinfo := NFclientinfo}} -> S2#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} -> S2#{clientinfo => PFclientinfo};
             {_, _} -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{password := NFpassword}} -> S3#{password => NFpassword};
        {#{password := PFpassword}, _} -> S3#{password => PFpassword};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_timer_request/3}).
merge_msg_timer_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{type := NFtype}} -> S2#{type => NFtype};
             {#{type := PFtype}, _} -> S2#{type => PFtype};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{interval := NFinterval}} -> S3#{interval => NFinterval};
        {#{interval := PFinterval}, _} -> S3#{interval => PFinterval};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_publish_request/3}).
merge_msg_publish_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{topic := NFtopic}} -> S2#{topic => NFtopic};
             {#{topic := PFtopic}, _} -> S2#{topic => PFtopic};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{qos := NFqos}} -> S3#{qos => NFqos};
             {#{qos := PFqos}, _} -> S3#{qos => PFqos};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{payload := NFpayload}} -> S4#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S4#{payload => PFpayload};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_subscribe_request/3}).
merge_msg_subscribe_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{topic := NFtopic}} -> S2#{topic => NFtopic};
             {#{topic := PFtopic}, _} -> S2#{topic => PFtopic};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{qos := NFqos}} -> S3#{qos => NFqos};
        {#{qos := PFqos}, _} -> S3#{qos => PFqos};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_unsubscribe_request/3}).
merge_msg_unsubscribe_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{topic := NFtopic}} -> S2#{topic => NFtopic};
        {#{topic := PFtopic}, _} -> S2#{topic => PFtopic};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_socket_created_request/3}).
merge_msg_socket_created_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{conninfo := PFconninfo}, #{conninfo := NFconninfo}} -> S2#{conninfo => merge_msg_conn_info(PFconninfo, NFconninfo, TrUserData)};
        {_, #{conninfo := NFconninfo}} -> S2#{conninfo => NFconninfo};
        {#{conninfo := PFconninfo}, _} -> S2#{conninfo => PFconninfo};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_received_bytes_request/3}).
merge_msg_received_bytes_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{bytes := NFbytes}} -> S2#{bytes => NFbytes};
        {#{bytes := PFbytes}, _} -> S2#{bytes => PFbytes};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_timer_timeout_request/3}).
merge_msg_timer_timeout_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{type := NFtype}} -> S2#{type => NFtype};
        {#{type := PFtype}, _} -> S2#{type => PFtype};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_socket_closed_request/3}).
merge_msg_socket_closed_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{reason := NFreason}} -> S2#{reason => NFreason};
        {#{reason := PFreason}, _} -> S2#{reason => PFreason};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_received_messages_request/3}).
merge_msg_received_messages_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{conn := NFconn}} -> S1#{conn => NFconn};
             {#{conn := PFconn}, _} -> S1#{conn => PFconn};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{messages := PFmessages}, #{messages := NFmessages}} -> S2#{messages => 'erlang_++'(PFmessages, NFmessages, TrUserData)};
        {_, #{messages := NFmessages}} -> S2#{messages => NFmessages};
        {#{messages := PFmessages}, _} -> S2#{messages => PFmessages};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_conn_info/3}).
merge_msg_conn_info(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{socktype := NFsocktype}} -> S1#{socktype => NFsocktype};
             {#{socktype := PFsocktype}, _} -> S1#{socktype => PFsocktype};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{peername := PFpeername}, #{peername := NFpeername}} -> S2#{peername => merge_msg_address(PFpeername, NFpeername, TrUserData)};
             {_, #{peername := NFpeername}} -> S2#{peername => NFpeername};
             {#{peername := PFpeername}, _} -> S2#{peername => PFpeername};
             {_, _} -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{sockname := PFsockname}, #{sockname := NFsockname}} -> S3#{sockname => merge_msg_address(PFsockname, NFsockname, TrUserData)};
             {_, #{sockname := NFsockname}} -> S3#{sockname => NFsockname};
             {#{sockname := PFsockname}, _} -> S3#{sockname => PFsockname};
             {_, _} -> S3
         end,
    case {PMsg, NMsg} of
        {#{peercert := PFpeercert}, #{peercert := NFpeercert}} -> S4#{peercert => merge_msg_certificate_info(PFpeercert, NFpeercert, TrUserData)};
        {_, #{peercert := NFpeercert}} -> S4#{peercert => NFpeercert};
        {#{peercert := PFpeercert}, _} -> S4#{peercert => PFpeercert};
        {_, _} -> S4
    end.

-compile({nowarn_unused_function,merge_msg_address/3}).
merge_msg_address(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{host := NFhost}} -> S1#{host => NFhost};
             {#{host := PFhost}, _} -> S1#{host => PFhost};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{port := NFport}} -> S2#{port => NFport};
        {#{port := PFport}, _} -> S2#{port => PFport};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_certificate_info/3}).
merge_msg_certificate_info(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{cn := NFcn}} -> S1#{cn => NFcn};
             {#{cn := PFcn}, _} -> S1#{cn => PFcn};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{dn := NFdn}} -> S2#{dn => NFdn};
        {#{dn := PFdn}, _} -> S2#{dn => PFdn};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_client_info/3}).
merge_msg_client_info(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{proto_name := NFproto_name}} -> S1#{proto_name => NFproto_name};
             {#{proto_name := PFproto_name}, _} -> S1#{proto_name => PFproto_name};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{proto_ver := NFproto_ver}} -> S2#{proto_ver => NFproto_ver};
             {#{proto_ver := PFproto_ver}, _} -> S2#{proto_ver => PFproto_ver};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{clientid := NFclientid}} -> S3#{clientid => NFclientid};
             {#{clientid := PFclientid}, _} -> S3#{clientid => PFclientid};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} -> S4#{username => NFusername};
             {#{username := PFusername}, _} -> S4#{username => PFusername};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{mountpoint := NFmountpoint}} -> S5#{mountpoint => NFmountpoint};
        {#{mountpoint := PFmountpoint}, _} -> S5#{mountpoint => PFmountpoint};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_message/3}).
merge_msg_message(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{node := NFnode}} -> S1#{node => NFnode};
             {#{node := PFnode}, _} -> S1#{node => PFnode};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S2#{id => NFid};
             {#{id := PFid}, _} -> S2#{id => PFid};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{qos := NFqos}} -> S3#{qos => NFqos};
             {#{qos := PFqos}, _} -> S3#{qos => PFqos};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{from := NFfrom}} -> S4#{from => NFfrom};
             {#{from := PFfrom}, _} -> S4#{from => PFfrom};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{topic := NFtopic}} -> S5#{topic => NFtopic};
             {#{topic := PFtopic}, _} -> S5#{topic => PFtopic};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{payload := NFpayload}} -> S6#{payload => NFpayload};
             {#{payload := PFpayload}, _} -> S6#{payload => PFpayload};
             _ -> S6
         end,
    case {PMsg, NMsg} of
        {_, #{timestamp := NFtimestamp}} -> S7#{timestamp => NFtimestamp};
        {#{timestamp := PFtimestamp}, _} -> S7#{timestamp => PFtimestamp};
        _ -> S7
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        empty_success -> v_msg_empty_success(Msg, [MsgName], TrUserData);
        code_response -> v_msg_code_response(Msg, [MsgName], TrUserData);
        send_bytes_request -> v_msg_send_bytes_request(Msg, [MsgName], TrUserData);
        close_socket_request -> v_msg_close_socket_request(Msg, [MsgName], TrUserData);
        authenticate_request -> v_msg_authenticate_request(Msg, [MsgName], TrUserData);
        timer_request -> v_msg_timer_request(Msg, [MsgName], TrUserData);
        publish_request -> v_msg_publish_request(Msg, [MsgName], TrUserData);
        subscribe_request -> v_msg_subscribe_request(Msg, [MsgName], TrUserData);
        unsubscribe_request -> v_msg_unsubscribe_request(Msg, [MsgName], TrUserData);
        socket_created_request -> v_msg_socket_created_request(Msg, [MsgName], TrUserData);
        received_bytes_request -> v_msg_received_bytes_request(Msg, [MsgName], TrUserData);
        timer_timeout_request -> v_msg_timer_timeout_request(Msg, [MsgName], TrUserData);
        socket_closed_request -> v_msg_socket_closed_request(Msg, [MsgName], TrUserData);
        received_messages_request -> v_msg_received_messages_request(Msg, [MsgName], TrUserData);
        conn_info -> v_msg_conn_info(Msg, [MsgName], TrUserData);
        address -> v_msg_address(Msg, [MsgName], TrUserData);
        certificate_info -> v_msg_certificate_info(Msg, [MsgName], TrUserData);
        client_info -> v_msg_client_info(Msg, [MsgName], TrUserData);
        message -> v_msg_message(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_empty_success/3}).
-dialyzer({nowarn_function,v_msg_empty_success/3}).
v_msg_empty_success(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_empty_success(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), empty_success}, M, Path);
v_msg_empty_success(X, Path, _TrUserData) -> mk_type_error({expected_msg, empty_success}, X, Path).

-compile({nowarn_unused_function,v_msg_code_response/3}).
-dialyzer({nowarn_function,v_msg_code_response/3}).
v_msg_code_response(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> 'v_enum_emqx.exproto.v1.ResultCode'(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{message := F2} -> v_type_string(F2, [message | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (message) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_code_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), code_response}, M, Path);
v_msg_code_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, code_response}, X, Path).

-compile({nowarn_unused_function,v_msg_send_bytes_request/3}).
-dialyzer({nowarn_function,v_msg_send_bytes_request/3}).
v_msg_send_bytes_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{bytes := F2} -> v_type_bytes(F2, [bytes | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (bytes) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_send_bytes_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), send_bytes_request}, M, Path);
v_msg_send_bytes_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, send_bytes_request}, X, Path).

-compile({nowarn_unused_function,v_msg_close_socket_request/3}).
-dialyzer({nowarn_function,v_msg_close_socket_request/3}).
v_msg_close_socket_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_close_socket_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), close_socket_request}, M, Path);
v_msg_close_socket_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, close_socket_request}, X, Path).

-compile({nowarn_unused_function,v_msg_authenticate_request/3}).
-dialyzer({nowarn_function,v_msg_authenticate_request/3}).
v_msg_authenticate_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{clientinfo := F2} -> v_msg_client_info(F2, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F3} -> v_type_string(F3, [password | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (clientinfo) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_authenticate_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), authenticate_request}, M, Path);
v_msg_authenticate_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, authenticate_request}, X, Path).

-compile({nowarn_unused_function,v_msg_timer_request/3}).
-dialyzer({nowarn_function,v_msg_timer_request/3}).
v_msg_timer_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{type := F2} -> 'v_enum_emqx.exproto.v1.TimerType'(F2, [type | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{interval := F3} -> v_type_uint32(F3, [interval | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (type) -> ok;
                      (interval) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_timer_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), timer_request}, M, Path);
v_msg_timer_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, timer_request}, X, Path).

-compile({nowarn_unused_function,v_msg_publish_request/3}).
-dialyzer({nowarn_function,v_msg_publish_request/3}).
v_msg_publish_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F2} -> v_type_string(F2, [topic | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{qos := F3} -> v_type_uint32(F3, [qos | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := F4} -> v_type_bytes(F4, [payload | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (topic) -> ok;
                      (qos) -> ok;
                      (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_publish_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), publish_request}, M, Path);
v_msg_publish_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, publish_request}, X, Path).

-compile({nowarn_unused_function,v_msg_subscribe_request/3}).
-dialyzer({nowarn_function,v_msg_subscribe_request/3}).
v_msg_subscribe_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F2} -> v_type_string(F2, [topic | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{qos := F3} -> v_type_uint32(F3, [qos | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (topic) -> ok;
                      (qos) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_subscribe_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), subscribe_request}, M, Path);
v_msg_subscribe_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, subscribe_request}, X, Path).

-compile({nowarn_unused_function,v_msg_unsubscribe_request/3}).
-dialyzer({nowarn_function,v_msg_unsubscribe_request/3}).
v_msg_unsubscribe_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F2} -> v_type_string(F2, [topic | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (topic) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_unsubscribe_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), unsubscribe_request}, M, Path);
v_msg_unsubscribe_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, unsubscribe_request}, X, Path).

-compile({nowarn_unused_function,v_msg_socket_created_request/3}).
-dialyzer({nowarn_function,v_msg_socket_created_request/3}).
v_msg_socket_created_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{conninfo := F2} -> v_msg_conn_info(F2, [conninfo | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (conninfo) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_socket_created_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), socket_created_request}, M, Path);
v_msg_socket_created_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, socket_created_request}, X, Path).

-compile({nowarn_unused_function,v_msg_received_bytes_request/3}).
-dialyzer({nowarn_function,v_msg_received_bytes_request/3}).
v_msg_received_bytes_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{bytes := F2} -> v_type_bytes(F2, [bytes | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (bytes) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_received_bytes_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), received_bytes_request}, M, Path);
v_msg_received_bytes_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, received_bytes_request}, X, Path).

-compile({nowarn_unused_function,v_msg_timer_timeout_request/3}).
-dialyzer({nowarn_function,v_msg_timer_timeout_request/3}).
v_msg_timer_timeout_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{type := F2} -> 'v_enum_emqx.exproto.v1.TimerType'(F2, [type | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_timer_timeout_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), timer_timeout_request}, M, Path);
v_msg_timer_timeout_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, timer_timeout_request}, X, Path).

-compile({nowarn_unused_function,v_msg_socket_closed_request/3}).
-dialyzer({nowarn_function,v_msg_socket_closed_request/3}).
v_msg_socket_closed_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{reason := F2} -> v_type_string(F2, [reason | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (reason) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_socket_closed_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), socket_closed_request}, M, Path);
v_msg_socket_closed_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, socket_closed_request}, X, Path).

-compile({nowarn_unused_function,v_msg_received_messages_request/3}).
-dialyzer({nowarn_function,v_msg_received_messages_request/3}).
v_msg_received_messages_request(#{} = M, Path, TrUserData) ->
    case M of
        #{conn := F1} -> v_type_string(F1, [conn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{messages := F2} ->
            if is_list(F2) ->
                   _ = [v_msg_message(Elem, [messages | Path], TrUserData) || Elem <- F2],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, message}}, F2, [messages | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (conn) -> ok;
                      (messages) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_received_messages_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), received_messages_request}, M, Path);
v_msg_received_messages_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, received_messages_request}, X, Path).

-compile({nowarn_unused_function,v_msg_conn_info/3}).
-dialyzer({nowarn_function,v_msg_conn_info/3}).
v_msg_conn_info(#{} = M, Path, TrUserData) ->
    case M of
        #{socktype := F1} -> 'v_enum_emqx.exproto.v1.SocketType'(F1, [socktype | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{peername := F2} -> v_msg_address(F2, [peername | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{sockname := F3} -> v_msg_address(F3, [sockname | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{peercert := F4} -> v_msg_certificate_info(F4, [peercert | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (socktype) -> ok;
                      (peername) -> ok;
                      (sockname) -> ok;
                      (peercert) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_conn_info(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), conn_info}, M, Path);
v_msg_conn_info(X, Path, _TrUserData) -> mk_type_error({expected_msg, conn_info}, X, Path).

-compile({nowarn_unused_function,v_msg_address/3}).
-dialyzer({nowarn_function,v_msg_address/3}).
v_msg_address(#{} = M, Path, TrUserData) ->
    case M of
        #{host := F1} -> v_type_string(F1, [host | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{port := F2} -> v_type_uint32(F2, [port | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (host) -> ok;
                      (port) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_address(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), address}, M, Path);
v_msg_address(X, Path, _TrUserData) -> mk_type_error({expected_msg, address}, X, Path).

-compile({nowarn_unused_function,v_msg_certificate_info/3}).
-dialyzer({nowarn_function,v_msg_certificate_info/3}).
v_msg_certificate_info(#{} = M, Path, TrUserData) ->
    case M of
        #{cn := F1} -> v_type_string(F1, [cn | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{dn := F2} -> v_type_string(F2, [dn | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (cn) -> ok;
                      (dn) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_certificate_info(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), certificate_info}, M, Path);
v_msg_certificate_info(X, Path, _TrUserData) -> mk_type_error({expected_msg, certificate_info}, X, Path).

-compile({nowarn_unused_function,v_msg_client_info/3}).
-dialyzer({nowarn_function,v_msg_client_info/3}).
v_msg_client_info(#{} = M, Path, TrUserData) ->
    case M of
        #{proto_name := F1} -> v_type_string(F1, [proto_name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{proto_ver := F2} -> v_type_string(F2, [proto_ver | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{clientid := F3} -> v_type_string(F3, [clientid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{username := F4} -> v_type_string(F4, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{mountpoint := F5} -> v_type_string(F5, [mountpoint | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (proto_name) -> ok;
                      (proto_ver) -> ok;
                      (clientid) -> ok;
                      (username) -> ok;
                      (mountpoint) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_info(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), client_info}, M, Path);
v_msg_client_info(X, Path, _TrUserData) -> mk_type_error({expected_msg, client_info}, X, Path).

-compile({nowarn_unused_function,v_msg_message/3}).
-dialyzer({nowarn_function,v_msg_message/3}).
v_msg_message(#{} = M, Path, TrUserData) ->
    case M of
        #{node := F1} -> v_type_string(F1, [node | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{id := F2} -> v_type_string(F2, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{qos := F3} -> v_type_uint32(F3, [qos | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{from := F4} -> v_type_string(F4, [from | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F5} -> v_type_string(F5, [topic | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := F6} -> v_type_bytes(F6, [payload | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{timestamp := F7} -> v_type_uint64(F7, [timestamp | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (node) -> ok;
                      (id) -> ok;
                      (qos) -> ok;
                      (from) -> ok;
                      (topic) -> ok;
                      (payload) -> ok;
                      (timestamp) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_message(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), message}, M, Path);
v_msg_message(X, Path, _TrUserData) -> mk_type_error({expected_msg, message}, X, Path).

-compile({nowarn_unused_function,'v_enum_emqx.exproto.v1.ResultCode'/3}).
-dialyzer({nowarn_function,'v_enum_emqx.exproto.v1.ResultCode'/3}).
'v_enum_emqx.exproto.v1.ResultCode'('SUCCESS', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.ResultCode'('UNKNOWN', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.ResultCode'('CONN_PROCESS_NOT_ALIVE', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.ResultCode'('REQUIRED_PARAMS_MISSED', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.ResultCode'('PARAMS_TYPE_ERROR', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.ResultCode'('PERMISSION_DENY', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.ResultCode'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_emqx.exproto.v1.ResultCode'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'emqx.exproto.v1.ResultCode'}, X, Path).

-compile({nowarn_unused_function,'v_enum_emqx.exproto.v1.TimerType'/3}).
-dialyzer({nowarn_function,'v_enum_emqx.exproto.v1.TimerType'/3}).
'v_enum_emqx.exproto.v1.TimerType'('KEEPALIVE', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.TimerType'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_emqx.exproto.v1.TimerType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'emqx.exproto.v1.TimerType'}, X, Path).

-compile({nowarn_unused_function,'v_enum_emqx.exproto.v1.SocketType'/3}).
-dialyzer({nowarn_function,'v_enum_emqx.exproto.v1.SocketType'/3}).
'v_enum_emqx.exproto.v1.SocketType'('TCP', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.SocketType'('SSL', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.SocketType'('UDP', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.SocketType'('DTLS', _Path, _TrUserData) -> ok;
'v_enum_emqx.exproto.v1.SocketType'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_emqx.exproto.v1.SocketType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'emqx.exproto.v1.SocketType'}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'emqx.exproto.v1.ResultCode'}, [{'SUCCESS', 0}, {'UNKNOWN', 1}, {'CONN_PROCESS_NOT_ALIVE', 2}, {'REQUIRED_PARAMS_MISSED', 3}, {'PARAMS_TYPE_ERROR', 4}, {'PERMISSION_DENY', 5}]},
     {{enum, 'emqx.exproto.v1.TimerType'}, [{'KEEPALIVE', 0}]},
     {{enum, 'emqx.exproto.v1.SocketType'}, [{'TCP', 0}, {'SSL', 1}, {'UDP', 2}, {'DTLS', 3}]},
     {{msg, empty_success}, []},
     {{msg, code_response}, [#{name => code, fnum => 1, rnum => 2, type => {enum, 'emqx.exproto.v1.ResultCode'}, occurrence => optional, opts => []}, #{name => message, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, send_bytes_request}, [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => bytes, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}]},
     {{msg, close_socket_request}, [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, authenticate_request},
      [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => clientinfo, fnum => 2, rnum => 3, type => {msg, client_info}, occurrence => optional, opts => []},
       #{name => password, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []}]},
     {{msg, timer_request},
      [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => type, fnum => 2, rnum => 3, type => {enum, 'emqx.exproto.v1.TimerType'}, occurrence => optional, opts => []},
       #{name => interval, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}]},
     {{msg, publish_request},
      [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => topic, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => qos, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => payload, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []}]},
     {{msg, subscribe_request},
      [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => topic, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => qos, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}]},
     {{msg, unsubscribe_request}, [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => topic, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, socket_created_request}, [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => conninfo, fnum => 2, rnum => 3, type => {msg, conn_info}, occurrence => optional, opts => []}]},
     {{msg, received_bytes_request}, [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => bytes, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}]},
     {{msg, timer_timeout_request}, [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'emqx.exproto.v1.TimerType'}, occurrence => optional, opts => []}]},
     {{msg, socket_closed_request}, [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => reason, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, received_messages_request}, [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => messages, fnum => 2, rnum => 3, type => {msg, message}, occurrence => repeated, opts => []}]},
     {{msg, conn_info},
      [#{name => socktype, fnum => 1, rnum => 2, type => {enum, 'emqx.exproto.v1.SocketType'}, occurrence => optional, opts => []},
       #{name => peername, fnum => 2, rnum => 3, type => {msg, address}, occurrence => optional, opts => []},
       #{name => sockname, fnum => 3, rnum => 4, type => {msg, address}, occurrence => optional, opts => []},
       #{name => peercert, fnum => 4, rnum => 5, type => {msg, certificate_info}, occurrence => optional, opts => []}]},
     {{msg, address}, [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => port, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []}]},
     {{msg, certificate_info}, [#{name => cn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => dn, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, client_info},
      [#{name => proto_name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => proto_ver, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => clientid, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => username, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
       #{name => mountpoint, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []}]},
     {{msg, message},
      [#{name => node, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => qos, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => from, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
       #{name => topic, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
       #{name => payload, fnum => 6, rnum => 7, type => bytes, occurrence => optional, opts => []},
       #{name => timestamp, fnum => 7, rnum => 8, type => uint64, occurrence => optional, opts => []}]}].


get_msg_names() ->
    [empty_success,
     code_response,
     send_bytes_request,
     close_socket_request,
     authenticate_request,
     timer_request,
     publish_request,
     subscribe_request,
     unsubscribe_request,
     socket_created_request,
     received_bytes_request,
     timer_timeout_request,
     socket_closed_request,
     received_messages_request,
     conn_info,
     address,
     certificate_info,
     client_info,
     message].


get_group_names() -> [].


get_msg_or_group_names() ->
    [empty_success,
     code_response,
     send_bytes_request,
     close_socket_request,
     authenticate_request,
     timer_request,
     publish_request,
     subscribe_request,
     unsubscribe_request,
     socket_created_request,
     received_bytes_request,
     timer_timeout_request,
     socket_closed_request,
     received_messages_request,
     conn_info,
     address,
     certificate_info,
     client_info,
     message].


get_enum_names() -> ['emqx.exproto.v1.ResultCode', 'emqx.exproto.v1.TimerType', 'emqx.exproto.v1.SocketType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(empty_success) -> [];
find_msg_def(code_response) -> [#{name => code, fnum => 1, rnum => 2, type => {enum, 'emqx.exproto.v1.ResultCode'}, occurrence => optional, opts => []}, #{name => message, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(send_bytes_request) -> [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => bytes, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}];
find_msg_def(close_socket_request) -> [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(authenticate_request) ->
    [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => clientinfo, fnum => 2, rnum => 3, type => {msg, client_info}, occurrence => optional, opts => []},
     #{name => password, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []}];
find_msg_def(timer_request) ->
    [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => type, fnum => 2, rnum => 3, type => {enum, 'emqx.exproto.v1.TimerType'}, occurrence => optional, opts => []},
     #{name => interval, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}];
find_msg_def(publish_request) ->
    [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => topic, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => qos, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => payload, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []}];
find_msg_def(subscribe_request) ->
    [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => topic, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => qos, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []}];
find_msg_def(unsubscribe_request) -> [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => topic, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(socket_created_request) -> [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => conninfo, fnum => 2, rnum => 3, type => {msg, conn_info}, occurrence => optional, opts => []}];
find_msg_def(received_bytes_request) -> [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => bytes, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []}];
find_msg_def(timer_timeout_request) ->
    [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'emqx.exproto.v1.TimerType'}, occurrence => optional, opts => []}];
find_msg_def(socket_closed_request) -> [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => reason, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(received_messages_request) -> [#{name => conn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => messages, fnum => 2, rnum => 3, type => {msg, message}, occurrence => repeated, opts => []}];
find_msg_def(conn_info) ->
    [#{name => socktype, fnum => 1, rnum => 2, type => {enum, 'emqx.exproto.v1.SocketType'}, occurrence => optional, opts => []},
     #{name => peername, fnum => 2, rnum => 3, type => {msg, address}, occurrence => optional, opts => []},
     #{name => sockname, fnum => 3, rnum => 4, type => {msg, address}, occurrence => optional, opts => []},
     #{name => peercert, fnum => 4, rnum => 5, type => {msg, certificate_info}, occurrence => optional, opts => []}];
find_msg_def(address) -> [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => port, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []}];
find_msg_def(certificate_info) -> [#{name => cn, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => dn, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(client_info) ->
    [#{name => proto_name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => proto_ver, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => clientid, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => username, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
     #{name => mountpoint, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []}];
find_msg_def(message) ->
    [#{name => node, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => qos, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => from, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
     #{name => topic, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
     #{name => payload, fnum => 6, rnum => 7, type => bytes, occurrence => optional, opts => []},
     #{name => timestamp, fnum => 7, rnum => 8, type => uint64, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('emqx.exproto.v1.ResultCode') -> [{'SUCCESS', 0}, {'UNKNOWN', 1}, {'CONN_PROCESS_NOT_ALIVE', 2}, {'REQUIRED_PARAMS_MISSED', 3}, {'PARAMS_TYPE_ERROR', 4}, {'PERMISSION_DENY', 5}];
find_enum_def('emqx.exproto.v1.TimerType') -> [{'KEEPALIVE', 0}];
find_enum_def('emqx.exproto.v1.SocketType') -> [{'TCP', 0}, {'SSL', 1}, {'UDP', 2}, {'DTLS', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('emqx.exproto.v1.ResultCode', Value) -> 'enum_symbol_by_value_emqx.exproto.v1.ResultCode'(Value);
enum_symbol_by_value('emqx.exproto.v1.TimerType', Value) -> 'enum_symbol_by_value_emqx.exproto.v1.TimerType'(Value);
enum_symbol_by_value('emqx.exproto.v1.SocketType', Value) -> 'enum_symbol_by_value_emqx.exproto.v1.SocketType'(Value).


enum_value_by_symbol('emqx.exproto.v1.ResultCode', Sym) -> 'enum_value_by_symbol_emqx.exproto.v1.ResultCode'(Sym);
enum_value_by_symbol('emqx.exproto.v1.TimerType', Sym) -> 'enum_value_by_symbol_emqx.exproto.v1.TimerType'(Sym);
enum_value_by_symbol('emqx.exproto.v1.SocketType', Sym) -> 'enum_value_by_symbol_emqx.exproto.v1.SocketType'(Sym).


'enum_symbol_by_value_emqx.exproto.v1.ResultCode'(0) -> 'SUCCESS';
'enum_symbol_by_value_emqx.exproto.v1.ResultCode'(1) -> 'UNKNOWN';
'enum_symbol_by_value_emqx.exproto.v1.ResultCode'(2) -> 'CONN_PROCESS_NOT_ALIVE';
'enum_symbol_by_value_emqx.exproto.v1.ResultCode'(3) -> 'REQUIRED_PARAMS_MISSED';
'enum_symbol_by_value_emqx.exproto.v1.ResultCode'(4) -> 'PARAMS_TYPE_ERROR';
'enum_symbol_by_value_emqx.exproto.v1.ResultCode'(5) -> 'PERMISSION_DENY'.


'enum_value_by_symbol_emqx.exproto.v1.ResultCode'('SUCCESS') -> 0;
'enum_value_by_symbol_emqx.exproto.v1.ResultCode'('UNKNOWN') -> 1;
'enum_value_by_symbol_emqx.exproto.v1.ResultCode'('CONN_PROCESS_NOT_ALIVE') -> 2;
'enum_value_by_symbol_emqx.exproto.v1.ResultCode'('REQUIRED_PARAMS_MISSED') -> 3;
'enum_value_by_symbol_emqx.exproto.v1.ResultCode'('PARAMS_TYPE_ERROR') -> 4;
'enum_value_by_symbol_emqx.exproto.v1.ResultCode'('PERMISSION_DENY') -> 5.

'enum_symbol_by_value_emqx.exproto.v1.TimerType'(0) -> 'KEEPALIVE'.


'enum_value_by_symbol_emqx.exproto.v1.TimerType'('KEEPALIVE') -> 0.

'enum_symbol_by_value_emqx.exproto.v1.SocketType'(0) -> 'TCP';
'enum_symbol_by_value_emqx.exproto.v1.SocketType'(1) -> 'SSL';
'enum_symbol_by_value_emqx.exproto.v1.SocketType'(2) -> 'UDP';
'enum_symbol_by_value_emqx.exproto.v1.SocketType'(3) -> 'DTLS'.


'enum_value_by_symbol_emqx.exproto.v1.SocketType'('TCP') -> 0;
'enum_value_by_symbol_emqx.exproto.v1.SocketType'('SSL') -> 1;
'enum_value_by_symbol_emqx.exproto.v1.SocketType'('UDP') -> 2;
'enum_value_by_symbol_emqx.exproto.v1.SocketType'('DTLS') -> 3.


get_service_names() -> ['emqx.exproto.v1.ConnectionAdapter', 'emqx.exproto.v1.ConnectionHandler'].


get_service_def('emqx.exproto.v1.ConnectionAdapter') ->
    {{service, 'emqx.exproto.v1.ConnectionAdapter'},
     [#{name => 'Send', input => send_bytes_request, output => code_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'Close', input => close_socket_request, output => code_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'Authenticate', input => authenticate_request, output => code_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'StartTimer', input => timer_request, output => code_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'Publish', input => publish_request, output => code_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'Subscribe', input => subscribe_request, output => code_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'Unsubscribe', input => unsubscribe_request, output => code_response, input_stream => false, output_stream => false, opts => []}]};
get_service_def('emqx.exproto.v1.ConnectionHandler') ->
    {{service, 'emqx.exproto.v1.ConnectionHandler'},
     [#{name => 'OnSocketCreated', input => socket_created_request, output => empty_success, input_stream => true, output_stream => false, opts => []},
      #{name => 'OnSocketClosed', input => socket_closed_request, output => empty_success, input_stream => true, output_stream => false, opts => []},
      #{name => 'OnReceivedBytes', input => received_bytes_request, output => empty_success, input_stream => true, output_stream => false, opts => []},
      #{name => 'OnTimerTimeout', input => timer_timeout_request, output => empty_success, input_stream => true, output_stream => false, opts => []},
      #{name => 'OnReceivedMessages', input => received_messages_request, output => empty_success, input_stream => true, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('emqx.exproto.v1.ConnectionAdapter') -> ['Send', 'Close', 'Authenticate', 'StartTimer', 'Publish', 'Subscribe', 'Unsubscribe'];
get_rpc_names('emqx.exproto.v1.ConnectionHandler') -> ['OnSocketCreated', 'OnSocketClosed', 'OnReceivedBytes', 'OnTimerTimeout', 'OnReceivedMessages'];
get_rpc_names(_) -> error.


find_rpc_def('emqx.exproto.v1.ConnectionAdapter', RpcName) -> 'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'(RpcName);
find_rpc_def('emqx.exproto.v1.ConnectionHandler', RpcName) -> 'find_rpc_def_emqx.exproto.v1.ConnectionHandler'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'('Send') -> #{name => 'Send', input => send_bytes_request, output => code_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'('Close') -> #{name => 'Close', input => close_socket_request, output => code_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'('Authenticate') -> #{name => 'Authenticate', input => authenticate_request, output => code_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'('StartTimer') -> #{name => 'StartTimer', input => timer_request, output => code_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'('Publish') -> #{name => 'Publish', input => publish_request, output => code_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'('Subscribe') -> #{name => 'Subscribe', input => subscribe_request, output => code_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'('Unsubscribe') -> #{name => 'Unsubscribe', input => unsubscribe_request, output => code_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionAdapter'(_) -> error.

'find_rpc_def_emqx.exproto.v1.ConnectionHandler'('OnSocketCreated') -> #{name => 'OnSocketCreated', input => socket_created_request, output => empty_success, input_stream => true, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionHandler'('OnSocketClosed') -> #{name => 'OnSocketClosed', input => socket_closed_request, output => empty_success, input_stream => true, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionHandler'('OnReceivedBytes') -> #{name => 'OnReceivedBytes', input => received_bytes_request, output => empty_success, input_stream => true, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionHandler'('OnTimerTimeout') -> #{name => 'OnTimerTimeout', input => timer_timeout_request, output => empty_success, input_stream => true, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionHandler'('OnReceivedMessages') -> #{name => 'OnReceivedMessages', input => received_messages_request, output => empty_success, input_stream => true, output_stream => false, opts => []};
'find_rpc_def_emqx.exproto.v1.ConnectionHandler'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"emqx.exproto.v1.ConnectionAdapter">>) -> 'emqx.exproto.v1.ConnectionAdapter';
fqbin_to_service_name(<<"emqx.exproto.v1.ConnectionHandler">>) -> 'emqx.exproto.v1.ConnectionHandler';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('emqx.exproto.v1.ConnectionAdapter') -> <<"emqx.exproto.v1.ConnectionAdapter">>;
service_name_to_fqbin('emqx.exproto.v1.ConnectionHandler') -> <<"emqx.exproto.v1.ConnectionHandler">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Send">>) -> {'emqx.exproto.v1.ConnectionAdapter', 'Send'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Close">>) -> {'emqx.exproto.v1.ConnectionAdapter', 'Close'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Authenticate">>) -> {'emqx.exproto.v1.ConnectionAdapter', 'Authenticate'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionAdapter">>, <<"StartTimer">>) -> {'emqx.exproto.v1.ConnectionAdapter', 'StartTimer'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Publish">>) -> {'emqx.exproto.v1.ConnectionAdapter', 'Publish'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Subscribe">>) -> {'emqx.exproto.v1.ConnectionAdapter', 'Subscribe'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Unsubscribe">>) -> {'emqx.exproto.v1.ConnectionAdapter', 'Unsubscribe'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnSocketCreated">>) -> {'emqx.exproto.v1.ConnectionHandler', 'OnSocketCreated'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnSocketClosed">>) -> {'emqx.exproto.v1.ConnectionHandler', 'OnSocketClosed'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnReceivedBytes">>) -> {'emqx.exproto.v1.ConnectionHandler', 'OnReceivedBytes'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnTimerTimeout">>) -> {'emqx.exproto.v1.ConnectionHandler', 'OnTimerTimeout'};
fqbins_to_service_and_rpc_name(<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnReceivedMessages">>) -> {'emqx.exproto.v1.ConnectionHandler', 'OnReceivedMessages'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionAdapter', 'Send') -> {<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Send">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionAdapter', 'Close') -> {<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Close">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionAdapter', 'Authenticate') -> {<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Authenticate">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionAdapter', 'StartTimer') -> {<<"emqx.exproto.v1.ConnectionAdapter">>, <<"StartTimer">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionAdapter', 'Publish') -> {<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Publish">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionAdapter', 'Subscribe') -> {<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Subscribe">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionAdapter', 'Unsubscribe') -> {<<"emqx.exproto.v1.ConnectionAdapter">>, <<"Unsubscribe">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionHandler', 'OnSocketCreated') -> {<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnSocketCreated">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionHandler', 'OnSocketClosed') -> {<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnSocketClosed">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionHandler', 'OnReceivedBytes') -> {<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnReceivedBytes">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionHandler', 'OnTimerTimeout') -> {<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnTimerTimeout">>};
service_and_rpc_name_to_fqbins('emqx.exproto.v1.ConnectionHandler', 'OnReceivedMessages') -> {<<"emqx.exproto.v1.ConnectionHandler">>, <<"OnReceivedMessages">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"emqx.exproto.v1.EmptySuccess">>) -> empty_success;
fqbin_to_msg_name(<<"emqx.exproto.v1.CodeResponse">>) -> code_response;
fqbin_to_msg_name(<<"emqx.exproto.v1.SendBytesRequest">>) -> send_bytes_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.CloseSocketRequest">>) -> close_socket_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.AuthenticateRequest">>) -> authenticate_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.TimerRequest">>) -> timer_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.PublishRequest">>) -> publish_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.SubscribeRequest">>) -> subscribe_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.UnsubscribeRequest">>) -> unsubscribe_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.SocketCreatedRequest">>) -> socket_created_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.ReceivedBytesRequest">>) -> received_bytes_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.TimerTimeoutRequest">>) -> timer_timeout_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.SocketClosedRequest">>) -> socket_closed_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.ReceivedMessagesRequest">>) -> received_messages_request;
fqbin_to_msg_name(<<"emqx.exproto.v1.ConnInfo">>) -> conn_info;
fqbin_to_msg_name(<<"emqx.exproto.v1.Address">>) -> address;
fqbin_to_msg_name(<<"emqx.exproto.v1.CertificateInfo">>) -> certificate_info;
fqbin_to_msg_name(<<"emqx.exproto.v1.ClientInfo">>) -> client_info;
fqbin_to_msg_name(<<"emqx.exproto.v1.Message">>) -> message;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(empty_success) -> <<"emqx.exproto.v1.EmptySuccess">>;
msg_name_to_fqbin(code_response) -> <<"emqx.exproto.v1.CodeResponse">>;
msg_name_to_fqbin(send_bytes_request) -> <<"emqx.exproto.v1.SendBytesRequest">>;
msg_name_to_fqbin(close_socket_request) -> <<"emqx.exproto.v1.CloseSocketRequest">>;
msg_name_to_fqbin(authenticate_request) -> <<"emqx.exproto.v1.AuthenticateRequest">>;
msg_name_to_fqbin(timer_request) -> <<"emqx.exproto.v1.TimerRequest">>;
msg_name_to_fqbin(publish_request) -> <<"emqx.exproto.v1.PublishRequest">>;
msg_name_to_fqbin(subscribe_request) -> <<"emqx.exproto.v1.SubscribeRequest">>;
msg_name_to_fqbin(unsubscribe_request) -> <<"emqx.exproto.v1.UnsubscribeRequest">>;
msg_name_to_fqbin(socket_created_request) -> <<"emqx.exproto.v1.SocketCreatedRequest">>;
msg_name_to_fqbin(received_bytes_request) -> <<"emqx.exproto.v1.ReceivedBytesRequest">>;
msg_name_to_fqbin(timer_timeout_request) -> <<"emqx.exproto.v1.TimerTimeoutRequest">>;
msg_name_to_fqbin(socket_closed_request) -> <<"emqx.exproto.v1.SocketClosedRequest">>;
msg_name_to_fqbin(received_messages_request) -> <<"emqx.exproto.v1.ReceivedMessagesRequest">>;
msg_name_to_fqbin(conn_info) -> <<"emqx.exproto.v1.ConnInfo">>;
msg_name_to_fqbin(address) -> <<"emqx.exproto.v1.Address">>;
msg_name_to_fqbin(certificate_info) -> <<"emqx.exproto.v1.CertificateInfo">>;
msg_name_to_fqbin(client_info) -> <<"emqx.exproto.v1.ClientInfo">>;
msg_name_to_fqbin(message) -> <<"emqx.exproto.v1.Message">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"emqx.exproto.v1.ResultCode">>) -> 'emqx.exproto.v1.ResultCode';
fqbin_to_enum_name(<<"emqx.exproto.v1.TimerType">>) -> 'emqx.exproto.v1.TimerType';
fqbin_to_enum_name(<<"emqx.exproto.v1.SocketType">>) -> 'emqx.exproto.v1.SocketType';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('emqx.exproto.v1.ResultCode') -> <<"emqx.exproto.v1.ResultCode">>;
enum_name_to_fqbin('emqx.exproto.v1.TimerType') -> <<"emqx.exproto.v1.TimerType">>;
enum_name_to_fqbin('emqx.exproto.v1.SocketType') -> <<"emqx.exproto.v1.SocketType">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'emqx.exproto.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "emqx_gateway.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["emqx_gateway.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["emqx_gateway"].


get_msg_containment("emqx_gateway") ->
    [address,
     authenticate_request,
     certificate_info,
     client_info,
     close_socket_request,
     code_response,
     conn_info,
     empty_success,
     message,
     publish_request,
     received_bytes_request,
     received_messages_request,
     send_bytes_request,
     socket_closed_request,
     socket_created_request,
     subscribe_request,
     timer_request,
     timer_timeout_request,
     unsubscribe_request];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("emqx_gateway") -> 'emqx.exproto.v1';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("emqx_gateway") -> ['emqx.exproto.v1.ConnectionAdapter', 'emqx.exproto.v1.ConnectionHandler'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("emqx_gateway") ->
    [{'emqx.exproto.v1.ConnectionAdapter', 'Send'},
     {'emqx.exproto.v1.ConnectionAdapter', 'Close'},
     {'emqx.exproto.v1.ConnectionAdapter', 'Authenticate'},
     {'emqx.exproto.v1.ConnectionAdapter', 'StartTimer'},
     {'emqx.exproto.v1.ConnectionAdapter', 'Publish'},
     {'emqx.exproto.v1.ConnectionAdapter', 'Subscribe'},
     {'emqx.exproto.v1.ConnectionAdapter', 'Unsubscribe'},
     {'emqx.exproto.v1.ConnectionHandler', 'OnSocketCreated'},
     {'emqx.exproto.v1.ConnectionHandler', 'OnSocketClosed'},
     {'emqx.exproto.v1.ConnectionHandler', 'OnReceivedBytes'},
     {'emqx.exproto.v1.ConnectionHandler', 'OnTimerTimeout'},
     {'emqx.exproto.v1.ConnectionHandler', 'OnReceivedMessages'}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("emqx_gateway") -> ['emqx.exproto.v1.ResultCode', 'emqx.exproto.v1.SocketType', 'emqx.exproto.v1.TimerType'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.EmptySuccess">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.Address">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.UnsubscribeRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.TimerTimeoutRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.TimerRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.SubscribeRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.SocketCreatedRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.SocketClosedRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.SendBytesRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.ReceivedMessagesRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.ReceivedBytesRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.PublishRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.CloseSocketRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.AuthenticateRequest">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.Message">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.CodeResponse">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.ConnInfo">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.ClientInfo">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(<<"emqx.exproto.v1.CertificateInfo">>) -> "emqx_gateway";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"emqx.exproto.v1.ConnectionHandler">>) -> "emqx_gateway";
get_proto_by_service_name_as_fqbin(<<"emqx.exproto.v1.ConnectionAdapter">>) -> "emqx_gateway";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"emqx.exproto.v1.TimerType">>) -> "emqx_gateway";
get_proto_by_enum_name_as_fqbin(<<"emqx.exproto.v1.SocketType">>) -> "emqx_gateway";
get_proto_by_enum_name_as_fqbin(<<"emqx.exproto.v1.ResultCode">>) -> "emqx_gateway";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"emqx.exproto.v1">>) -> ["emqx_gateway"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.6".

gpb_version_as_list() ->
    [4,19,6].

gpb_version_source() ->
    "file".
